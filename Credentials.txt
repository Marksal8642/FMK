login back-end code
Certainly! Let’s walk through each part of this code, breaking down how it works and how the different parts connect to create a complete login system.

---

### 1. **Database Configuration (`config.js`)**

In `config.js`, we set up a connection to the MySQL database:

```javascript
const mysql = require('mysql2');

const db = mysql.createConnection({
  host: 'localhost',    // MySQL server location
  user: 'root',         // Database username
  password: 'your_password', // Password for the MySQL user
  database: 'your_database'  // Name of the database to connect to
});

db.connect((err) => {
  if (err) throw err; // If connection fails, show an error
  console.log('Connected to the MySQL database');
});

module.exports = db;  // Export the database connection
```

This file:
- Sets up and exports a MySQL database connection.
- Allows the rest of the app to use `db` for making database queries.

---

### 2. **Controller for Authentication (`authController.js`)**

This file contains the main logic for user registration and login.

#### Registration (`register` function)

```javascript
exports.register = (req, res) => {
  const { username, password } = req.body;  // Receive username and password from the client

  // Check if the username already exists
  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) return res.status(500).send('Server error');

    if (results.length > 0) {
      return res.status(400).json({ message: 'Username already taken' }); // Username exists
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10); // Password encryption

    // Save the new user to the database
    db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, results) => {
      if (err) return res.status(500).send('Server error');
      res.status(201).json({ message: 'User registered successfully' });
    });
  });
};
```

1. **Receive the User’s Input**: `username` and `password` are taken from the request body.
2. **Check if User Exists**: A database query checks if the username is already taken.
3. **Hash the Password**: If the username is new, `bcrypt.hash` is used to encrypt the password for secure storage.
4. **Store User**: The `INSERT INTO users` query saves the username and hashed password into the database.

#### Login (`login` function)

```javascript
exports.login = (req, res) => {
  const { username, password } = req.body;

  // Find user by username
  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) return res.status(500).send('Server error');

    if (results.length === 0) {
      return res.status(400).json({ message: 'User not found' });
    }

    // Compare the hashed password
    const user = results[0];
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, {
      expiresIn: '1h'  // Token expires in 1 hour
    });

    res.json({ message: 'Login successful', token });
  });
};
```

1. **Find User by Username**: The database is queried for the user with the entered username.
2. **Check Password**: The entered password is compared to the hashed password stored in the database using `bcrypt.compare`.
3. **Generate JWT Token**: If the password is valid, a JWT token is created using `jwt.sign` with a 1-hour expiry.
4. **Respond with Token**: The token is sent to the client as a response. This token can be used to authenticate further requests.

---

### 3. **Routes (`auth.js`)**

The `auth.js` file defines the endpoints for registration and login.

```javascript
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/login', authController.login);     // Login route
router.post('/register', authController.register); // Registration route

module.exports = router;
```

- **Login Route** (`/login`): Accepts a POST request, and calls the `login` function from `authController`.
- **Register Route** (`/register`): Accepts a POST request, and calls the `register` function from `authController`.

---

### 4. **Main App File (`app.js`)**

This is the central file where we set up the Express application and define how it should handle incoming requests.

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const authRoutes = require('./routes/auth');

const app = express();
const PORT = 3000;

app.use(bodyParser.json()); // Middleware for parsing JSON data from requests
app.use('/auth', authRoutes); // Attach auth routes to /auth path

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
```

- **Middleware** (`bodyParser.json()`): Parses incoming JSON requests to access data sent by the client.
- **Route Handling** (`/auth`): Connects the authentication routes (`/login` and `/register`) to the app.
- **Server Start**: Starts the server on port 3000.

---

### 5. **Database Table Setup**

Finally, we need to create the `users` table in the MySQL database to store users’ information:

```sql
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);
```

This table has:
- An `id` column (auto-incremented) as the primary key.
- A `username` column to store the username.
- A `password` column to store the hashed password.

---

### How it Works Together

1. **Registration**: User sends their desired username and password to `/auth/register`. The server hashes the password, checks if the username is unique, and, if so, saves it to the database.
2. **Login**: User sends their username and password to `/auth/login`. The server checks if the user exists and if the password matches. If so, a JWT token is returned to the user.
3. **Token Authentication**: The token returned during login can be used in subsequent requests to authenticate the user, allowing access to protected routes.

Let me know if you need clarification on any part of this setup!
......................................................................................................................................
Here’s a simple back-end code example for a login page using Node.js, Express.js, and MySQL. This example also includes basic password hashing and JWT for authentication.

### Project Structure
```
project-folder
│
├── app.js              # Main app file
├── config.js           # Database configuration file
└── routes
    └── auth.js         # Authentication route file
└── controllers
    └── authController.js # Controller logic for authentication
```

### Step 1: Install Required Packages
First, make sure you have these packages installed. Run this in your terminal:
```bash
npm init -y
npm install express mysql2 bcryptjs jsonwebtoken body-parser
```

### Step 2: Create the Configuration File
Create `config.js` for your MySQL database connection settings.

```javascript
// config.js
const mysql = require('mysql2');

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'your_password', // Replace with your MySQL password
  database: 'your_database'  // Replace with your MySQL database name
});

db.connect((err) => {
  if (err) throw err;
  console.log('Connected to the MySQL database');
});

module.exports = db;
```

### Step 3: Set Up the Authentication Controller
Create `controllers/authController.js` for handling user authentication.

```javascript
// controllers/authController.js
const db = require('../config');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Secret key for JWT
const JWT_SECRET = 'your_jwt_secret_key'; // Replace with a secure secret key

// User login
exports.login = (req, res) => {
  const { username, password } = req.body;

  // Check if the user exists
  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) return res.status(500).send('Server error');

    if (results.length === 0) {
      return res.status(400).json({ message: 'User not found' });
    }

    // Validate password
    const user = results[0];
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, {
      expiresIn: '1h'
    });

    res.json({ message: 'Login successful', token });
  });
};

// User registration
exports.register = (req, res) => {
  const { username, password } = req.body;

  // Check if the user already exists
  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) return res.status(500).send('Server error');

    if (results.length > 0) {
      return res.status(400).json({ message: 'Username already taken' });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert new user into database
    db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, results) => {
      if (err) return res.status(500).send('Server error');
      res.status(201).json({ message: 'User registered successfully' });
    });
  });
};
```

### Step 4: Set Up Routes
Create `routes/auth.js` to define authentication endpoints.

```javascript
// routes/auth.js
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

// Login route
router.post('/login', authController.login);

// Register route
router.post('/register', authController.register);

module.exports = router;
```

### Step 5: Create the Main Application File
Create `app.js` to set up and run the Express application.

```javascript
// app.js
const express = require('express');
const bodyParser = require('body-parser');
const authRoutes = require('./routes/auth');

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());

// Routes
app.use('/auth', authRoutes);

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
```

### Step 6: Create Database and User Table
In MySQL, create a database and `users` table:

```sql
CREATE DATABASE your_database;
USE your_database;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);
```

### How to Use
1. Start your server by running:
   ```bash
   node app.js
   ```
2. Register a user with a `POST` request to `/auth/register` and login with a `POST` request to `/auth/login`.

This setup provides a simple but functional back-end for an online login page using Node.js, including password hashing and token-based authentication. Let me know if you’d like further customizations or features!


Yes, this is a complete example of a basic back-end setup for an online login system using Node.js, Express, MySQL, bcrypt for password hashing, and JWT for authentication. Here’s a quick recap of what’s covered:

1. **Database Configuration**: Set up a connection to MySQL.
2. **Controllers**: Logic for registration and login, including password hashing and JWT generation.
3. **Routes**: Endpoints for registration and login.
4. **App Setup**: The main server file to handle requests and routes.
5. **Database Setup**: SQL script to create the `users` table.

### Additional Optional Features

Depending on your requirements, you might consider adding:

1. **Validation**: Use a library like `express-validator` for input validation on fields (e.g., ensure strong passwords and valid usernames).
   
2. **Environment Variables**: Use `dotenv` to keep sensitive information like `JWT_SECRET` and database credentials secure.
   ```bash
   npm install dotenv
   ```
   Then, create a `.env` file:
   ```plaintext
   JWT_SECRET=your_jwt_secret_key
   DB_HOST=localhost
   DB_USER=root
   DB_PASS=your_password
   DB_NAME=your_database
   ```

3. **Logout Endpoint**: Implement a `/logout` endpoint that invalidates the JWT token (or use token blacklisting to log out users).

4. **Role-Based Access**: Add roles (e.g., `user`, `admin`) in the `users` table and build logic to restrict access to certain routes.

5. **Refresh Tokens**: For longer sessions, implement refresh tokens to allow users to maintain their login state.

Would you like guidance on any of these additional features?